nasm -f elf hello.asm

SYMBOL

[label]   mnemonic   [operands]   [;comment]
INC COUNT        ; Increment the memory variable COUNT
MOV TOTAL, 48    ; Transfer the value 48 in the 
                 ; memory variable TOTAL
ADD AH, BH       ; Add the content of the 
                 ; BH register into the AH register
AND MASK1, 128   ; Perform AND operation on the 
                 ; variable MASK1 and 128
ADD MARKS, 10    ; Add 10 to the variable MARKS
MOV AL, 10       ; Transfer the value 10 to the AL register

/*************************************************************
mov x, y      	x ← y
and x, y	x ← x and y
or x, y	x ← x or y
xor x, y	x ← x xor y
add x, y	x ← x + y
sub x, y	x ← x – y
inc x	x ← x + 1
dec x	x ← x – 1
syscall	Invoke an operating system routine
db	A pseudo-instruction that declares bytes that will be in memory when the program runs
/*************************************************************
REGISTRE

RAX ; Values are returned from functions in this register.
RCX
RDX ; Scratch register used to pass function argument #2 in 64-bit Linux.  In 64-bit Windows, a preserved register. 
RBX 
RSP 
RBP 
RSI 
RDI

LINKS
NASM Tutorial:
	64 & 32 bits
https://cs.lmu.edu/~ray/notes/nasmtutorial/
http://sevanspowell.net/posts/learning-nasm-on-macos.html
	32 bits
https://www.tutorialspoint.com/assembly_programming/assembly_basic_syntax.htm
Bible: 
https://www.nasm.us/xdoc/2.13.01/html/nasmdoc0.html
Registre: 
https://www.cs.uaf.edu/2017/fall/cs301/reference/x86_64.html
system calls: 
https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/
Code example:
https://www.csee.umbc.edu/portal/help/nasm/sample_64.shtml#hello_64.asm